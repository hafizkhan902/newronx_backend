# Frontend Avatar Upload Implementation Guide

## 1. Component Structure
Create a new component for the avatar upload:

```jsx
// components/AvatarUpload.jsx
import { useState } from 'react';

const AvatarUpload = ({ onAvatarChange }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  return (
    <div className="avatar-upload">
      {/* Component content */}
    </div>
  );
};

export default AvatarUpload;
```

## 2. File Input and Preview
Add a hidden file input and preview functionality:

```jsx
const AvatarUpload = ({ onAvatarChange }) => {
  const [preview, setPreview] = useState(null);
  
  return (
    <div className="avatar-upload">
      <input
        type="file"
        id="avatar-input"
        accept="image/*"
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
      
      <div 
        className="avatar-container" 
        onClick={() => document.getElementById('avatar-input').click()}
      >
        {preview ? (
          <img src={preview} alt="Avatar preview" className="avatar-preview" />
        ) : (
          <div className="avatar-placeholder">
            Click to upload
          </div>
        )}
      </div>
    </div>
  );
};
```

## 3. Auto-Upload Implementation
Add the upload logic that triggers immediately when a file is selected:

```jsx
const handleFileChange = async (event) => {
  const file = event.target.files[0];
  if (!file) return;

  // Show preview immediately
  const previewUrl = URL.createObjectURL(file);
  setPreview(previewUrl);
  
  // Start upload
  setLoading(true);
  setError(null);

  try {
    const formData = new FormData();
    formData.append('avatar', file);

    const response = await fetch('http://localhost:2000/api/users/avatar', {
      method: 'POST',
      credentials: 'include', // Important for cookies/authentication
      body: formData
    });

    if (!response.ok) {
      throw new Error('Upload failed');
    }

    const data = await response.json();
    
    // Call the parent's callback with the new avatar URL
    onAvatarChange(data.avatar);
  } catch (err) {
    setError('Failed to upload avatar');
    console.error('Upload error:', err);
  } finally {
    setLoading(false);
  }
};
```

## 4. Styling
Add these CSS styles to make it look good:

```css
.avatar-upload {
  position: relative;
  width: 150px;
  height: 150px;
}

.avatar-container {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  overflow: hidden;
  cursor: pointer;
  background: #f0f0f0;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.avatar-container:hover {
  opacity: 0.8;
}

.avatar-preview {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  color: #666;
  font-size: 14px;
}
```

## 5. Usage in Parent Component
Here's how to use the component:

```jsx
// pages/Profile.jsx
import { useState } from 'react';
import AvatarUpload from '../components/AvatarUpload';

const Profile = () => {
  const [avatarUrl, setAvatarUrl] = useState(user?.avatar || '');

  const handleAvatarChange = (newAvatarUrl) => {
    setAvatarUrl(newAvatarUrl);
    // Update your user context/state if needed
  };

  return (
    <div className="profile">
      <AvatarUpload onAvatarChange={handleAvatarChange} />
      {/* Rest of profile content */}
    </div>
  );
};
```

## 6. Loading and Error States
Add visual feedback for loading and error states:

```jsx
const AvatarUpload = ({ onAvatarChange }) => {
  // ... existing code ...

  return (
    <div className="avatar-upload">
      {loading && <div className="upload-overlay">Uploading...</div>}
      {error && <div className="error-message">{error}</div>}
      {/* ... existing JSX ... */}
    </div>
  );
};
```

## 7. Additional Styling for States
```css
.upload-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.error-message {
  color: red;
  font-size: 12px;
  margin-top: 8px;
  text-align: center;
}
```

## Important Notes:

1. **File Validation:**
   - Add size and type validation before upload
   - Example: Maximum 5MB, only images

2. **Error Handling:**
   - Show user-friendly error messages
   - Provide retry functionality

3. **Security:**
   - Ensure CORS is properly configured
   - Include authentication cookies
   - Validate file types server-side

4. **Performance:**
   - Consider compressing images before upload
   - Show loading state during upload
   - Maintain aspect ratio in preview

5. **Accessibility:**
   - Add proper ARIA labels
   - Ensure keyboard navigation works
   - Provide clear feedback for screen readers

## Example File Validation:
```javascript
const validateFile = (file) => {
  const MAX_SIZE = 5 * 1024 * 1024; // 5MB
  const ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/gif'];

  if (!ALLOWED_TYPES.includes(file.type)) {
    throw new Error('Invalid file type. Please upload an image.');
  }

  if (file.size > MAX_SIZE) {
    throw new Error('File too large. Maximum size is 5MB.');
  }
};
```

## Testing Checklist:
1. ✓ Image preview works
2. ✓ Upload starts automatically
3. ✓ Loading state shows
4. ✓ Error handling works
5. ✓ Success feedback shown
6. ✓ Avatar updates immediately
7. ✓ Authentication maintained
8. ✓ Cleanup on unmount 